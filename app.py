import streamlit as st
import pandas as pd
from supabase import create_client, Client

# ===================== SUPABASE CONFIG =====================
url = "https://bpagbbmedpgbbfxphpkx.supabase.co"
key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJwYWdiYm1lZHBnYmJmeHBocGt4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM1NDYxOTUsImV4cCI6MjA2OTEyMjE5NX0.9najNtOfvPHtpA9aKqy56F15dqIZAcX-sA1GfNBzN68"
supabase: Client = create_client(url, key)

# ===================== LECTURE DES DONN√âES =====================
@st.cache_data
def load_data():
    response = supabase.table("donnees_mna").select("*").execute()
    df = pd.DataFrame(response.data)
    return df

df = load_data()

# DEBUG: Affiche les colonnes et un aper√ßu pour diagnostiquer l'erreur
st.write("üß™ Colonnes d√©tect√©es :", df.columns.tolist())
st.write("üìä Aper√ßu des donn√©es :", df.head())

# ===================== INTERFACE =====================
st.title("üïµÔ∏è‚Äç‚ôÇÔ∏è Screening M&A interactif")

# Choix R√©gion
region = st.selectbox("üåç R√©gion", [""] + sorted(df["R√©gion"].dropna().unique().tolist()))

# Choix Pays
pays = st.selectbox("üè≥Ô∏è Pays", [""] + sorted(df["Pays"].dropna().unique().tolist()))

# Choix filtre poste + ann√©e + minimum
poste_filtre = st.selectbox("üìå Filtre bas√© sur le poste", [""] + sorted(df["Poste"].dropna().unique().tolist()))
annee = st.selectbox("üìÖ Ann√©e", [""] + [str(col) for col in df.columns if col.isdigit()])
min_val = st.number_input("üìâ Valeur minimale pour le poste s√©lectionn√©", min_value=0.0, value=0.0)

# ===================== FILTRAGE =====================
if poste_filtre and annee:
    # √âtape 1 : identifier les entreprises qui passent les filtres
    df_filtre_base = df[
        (df["Poste"] == poste_filtre) &
        (df[annee].astype(float) >= min_val)
    ]
    entreprises_filtr√©es = df_filtre_base["Entreprise"].unique().tolist()

    # √âtape 2 : r√©cup√©rer toutes les lignes de ces entreprises
    df_filtre = df[df["Entreprise"].isin(entreprises_filtr√©es)]

    # Filtrage optionnel R√©gion/Pays
    if region:
        df_filtre = df_filtre[df_filtre["R√©gion"] == region]
    if pays:
        df_filtre = df_filtre[df_filtre["Pays"] == pays]

    st.success(f"{len(df_filtre)} lignes affich√©es pour {len(entreprises_filtr√©es)} entreprises filtr√©es.")
    st.dataframe(df_filtre)

    # Export XLSX
    @st.cache_data
    def to_excel(df):
        from io import BytesIO
        output = BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='MNA_Filtered')
        return output.getvalue()

    xlsx = to_excel(df_filtre)
    st.download_button("‚¨áÔ∏è T√©l√©charger en XLSX", xlsx, "filtered_data.xlsx")

else:
    st.info("üìå Choisis au minimum un poste, une ann√©e et une valeur pour filtrer.")

